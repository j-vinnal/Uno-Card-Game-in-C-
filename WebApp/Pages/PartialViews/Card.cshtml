@using Domain
@model Domain.Dto.GameCardHeight

@{
    var cardModel = new Card();
   
}

@{

  GameCard card = Model.Card;
  double cardWidth = Model.Width;
  
}



@{
    Layout = null;
}

@{
string yellow = "#B3AD15";
  string green = "#2F7D26";
  string blue = "#323E66";
  string red = "#8C1515";
  
  
    double width = cardWidth;
    double height = width * 1.6;
    string borderRadius = width / 10 + "px";
    double ellipseWidth = width * 0.8;
    double ellipseHeight = width * 1.3;
    double ellipseTop = (width * 1.6 - ellipseHeight) / 2;
    double contentSkip = height / 4;
    double smallContentSkip = height / 15;
    string contentFont = height / 2.5 + "px";
    string smallContentFont = height / 10 + "px";
    string skipBorder = height / 20 + "px";
    string smallSkipBorder = height / 75 + "px";
    double plusTwoWidth = width / 4;
    double plusTwoHeight = (width / 4) * 1.6;
    double plusTwoLeft = width / 5.7;
    double reverseContentHeight = height / 2;
    string plusTwoBorder = width / 40 + "px";
    string reverseArrow = (reverseContentHeight / 4) + "px";
    string reverseAfterRight = (-reverseContentHeight / 4) + 1 + "px";
    string reverseContentTop = (-reverseContentHeight / 8) + "px";
    string reverseLastChildTop = (reverseContentHeight / 20) + "px";
    string reverseLastChildRight = (reverseContentHeight / 3) + "px";
    string wildMargin = -ellipseWidth / 3.2 + "px";
    string wildMargin2 = -ellipseWidth / 4 + "px";
    string wildHeight = ellipseWidth * 1.625 + "px";
    string wildSegmentWidth = ellipseWidth / 2 + "px";
    string wildSegmentHeight = (ellipseWidth * 1.625) / 2 + "px";
    string smallSegmentWildWidth = ellipseWidth / 15 + "px";
    string smallSegmentWildHeight = ellipseHeight / 17 + "px";
    string smallContentReverse = height / 15 * 2 + "px";
    string wildBorder = width / 100 + "px";
    string smallContentTop = width / 40 + "px";
    string smallContentLeft = width / 20 + "px";
    string smallContentReverseLeft = -(ellipseWidth / 15) + 1 + "px";
    string smallContentAfter = -height / 60 + "px";
    string smallContentReverseRight = height / 22.5 + "px";
    string smallContentReverseTop = height / 150+ "px";
    string plusFourMargin = -width / 4 + "px";
    string plusFourMargin2 = -width / 5 + "px";
}

<style>

.card {
  width: @(width + "px");
  height: @(height + "px");
  border-radius: @borderRadius;
  display: inline-block;
  position: relative;
  font-family: Tahoma, serif;
  line-height: 1.2;
  box-shadow: 0 7px 7px rgba(0,0,0,0.48);
  border: 5px solid #202124; 

}

.card:before {
  content: "";
  position: absolute;
  top: -4px; 
  right: -4px; 
  bottom: -4px;
  left: -4px;
  border: 3px solid white; 
  border-radius: inherit;
}

.card.green {
  background-color: @green;
}
.card.blue {
  background-color: @blue;
}
.card.red {
  background-color: @red;
}
.card.yellow {
  background-color: @yellow;
}
.card.black {
  background-color: black;
}
.card .ellipse {
  background-color: white;
  margin: auto;
  width: @(ellipseWidth + "px");
  height: @(ellipseHeight + "px");
  position: relative;
  top: @(ellipseTop + "px");
  border-radius: 50%;
  transform: skewX(-25deg);
}

.card .ellipse-cardBack {
  background-color: @red;
  margin: auto;
  width: @(ellipseWidth + "px");
  height: @(ellipseHeight + "px");
  position: relative;
  top: @(ellipseTop + "px");
  border-radius: 50%;
  transform: skewX(-25deg);
}

.card .content {
  position: absolute;
  left: 30%;
  top: 25%;
  font-size: @contentFont;
  font-weight: bold;
 
  
}


.card .content.green {
  color: @green;
}


.card .content.blue {
  color: @blue;
  }

.card .content.red {
  color: @red;
}
.card .content.yellow {
  color: @yellow;
}
.card .content.black {
  color: black;
}

.card .content .skip {
  width: @(contentSkip + "px");
  height: @(contentSkip + "px");
  border-radius: 50%;
  margin-top: 20%;
}

.card .content.green .skip {
  border: @skipBorder solid @green;
}

.card .content.blue .skip {
  border: @skipBorder solid @blue;
}

.card .content.red .skip {
  border: @skipBorder solid @red;
}

.card .content.yellow .skip {
  border: @skipBorder solid @yellow;
}

.card .content.green .skip:before {
  background-color: @green;
}

.card .content.blue .skip:before {
  background-color: @blue;
}

.card .content.red .skip:before {
  background-color: @red;
}

.card .content.yellow .skip:before {
  background-color: @yellow;
}

.card .content.black .skip:before {
  background-color: black;
}

.card .content .skip:before {
  content: "";
  display: block;
  width: 100%;
  height: 20%;
  position: relative;
  top: 40%;
  transform: rotate(-45deg);
}

.card .content.green .plus-two,
.card .content.blue .plus-two,
.card .content.red .plus-two,
.card .content.yellow .plus-two,
.card .content.black .plus-two {
  /* height: 100%; */
  position: relative;
}

.card .content .plus-two:before,
.card .content .plus-two:after {
  content: "";
  display: block;
  width: @(plusTwoWidth + "px");
  height: @(plusTwoHeight + "px");
  border-radius: 10%;
  border: @plusTwoBorder solid white;
  position: absolute;
}

.card .content.green .plus-two:before,
.card .content.green .plus-two:after{
  background-color: @green;
}

.card .content.blue .plus-two:before,
 .card .content.blue .plus-two:after{
  background-color: @blue;
}

.card .content.red .plus-two:before,
 .card .content.red .plus-two:after{
  background-color: @red;
}

.card .content.yellow .plus-two:before,
.card .content.yellow .plus-two:after{
background-color: @yellow;
}

.card .content.black .plus-two:before,
 .card .content.black .plus-two:after{
  background-color: black;
}

.card .plus-two:before {
    left: @(plusTwoLeft + "px");
}

.card .plus-two:after {
    top: @(plusTwoWidth + "px");
}

.card .content .reverse {
  height: @(reverseContentHeight + "px");
  margin-top: -89%;
  margin-left: 100%;
}

.card .content .reverse .arrows {
  display: inline-block;
  transform: rotate(-45deg);
}

.card .content .reverse .arrows .arrow {
  width: @reverseArrow; 
  height: @reverseArrow;
  position: relative;
}

.card .content.green .reverse .arrows .arrow {
  background-color: @green;
}

.card .content.blue .reverse .arrows .arrow {
  background-color: @blue;
}

.card .content.red .reverse .arrows .arrow {
  background-color: @red;
}

.card .content.yellow .reverse .arrows .arrow {
  background-color: @yellow;
}

.card .content.black .reverse .arrows .arrow {
  background-color: black;
}

.card .content .reverse .arrows .arrow:after {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border: @reverseArrow solid @yellow;
    border-top-color: transparent;
    border-bottom-color: transparent;
    border-right: none;
    position: absolute;
    right: @reverseAfterRight;
    top: @reverseContentTop;
}

.card .content.blue .reverse .arrows .arrow:before,
.card .content.green .reverse .arrows .arrow:before,
.card .content.red .reverse .arrows .arrow:before,
.card .content.yellow .reverse .arrows .arrow:before,
.card .content.black .reverse .arrows .arrow:before {
  content: "";
  display: block;
  width: @reverseArrow;
  height: @reverseArrow;
  background-color: inherit;
  border-top-left-radius: 100%;
  position: absolute;
  left: @reverseAfterRight;
}

.card .content.green .reverse .arrows .arrow:after {
  border-left: @reverseArrow solid @green;
}

.card .content.blue .reverse .arrows .arrow:after {
  border-left: @reverseArrow solid @blue;
}

.card .content.red .reverse .arrows .arrow:after {
  border-left: @reverseArrow solid @red;
}

.card .content.yellow .reverse .arrows .arrow:after {
  border-left: @reverseArrow solid @yellow;
}

.card .content.black .reverse .arrows .arrow:after {
  border-left: @reverseArrow solid black;
}

.card .content .reverse .arrows .arrow:last-child {
  transform: rotate(180deg);
  top: @reverseLastChildTop;
  right: @reverseLastChildRight;
}

.card .content.black .skip {
  width: 80px;
  height: 80px;
  border: 16px solid black;
  border-radius: 50%;
  margin-top: 20%;
}

.card .content .skip {
  margin-left: -10%;
}

.card .content .wild {
  margin: @wildMargin 0 0 @wildMargin2;
  background-color: white;
  width: @(ellipseWidth + "px");
  height: @wildHeight;
  border-radius: 50%;
  transform: skewX(-25deg);
  overflow: hidden;
  font-size: 0;
  border: @wildBorder solid white;
}


.card .content .wild .segment {
  display: inline-block;
  width: @wildSegmentWidth;
  height: @wildSegmentHeight;
}

.card .content .wild .segment.red {
  background-color: @red;
}
.card .content .wild .segment.green {
  background-color: @green;
}
.card .content .wild .segment.yellow {
  background-color: @yellow;
}
.card .content .wild .segment.blue {
  background-color: @blue;
}

.card .small-content,
.card .small-content-reverse {
  position: absolute;
  font-size: @smallContentFont;
  color: white;
  font-weight: bold;
  
}





.card .small-content .skip,
.card .small-content-reverse .skip {
  width: @(smallContentSkip + "px");
  height: @(smallContentSkip + "px");
  border: @smallSkipBorder solid white;
  border-radius: 50%;
  margin-top: 20%;
}
.card .small-content .skip:before,
.card .small-content-reverse .skip:before {
  content: "";
  display: block;
  width: 100%;
  height: 20%;
  background-color: white;
  position: relative;
  top: 40%;
  transform: rotate(-45deg);
}

.card .small-content .reverse,
.card .small-content-reverse .reverse {
  height: @smallContentReverse;
  margin-top: 60%;
  margin-left: 100%;
}
.card .small-content .reverse .arrows,
.card .small-content-reverse .reverse .arrows {
  display: inline-block;
  transform: rotate(-45deg);
}

.card .small-content .reverse .arrows .arrow,
.card .small-content-reverse .reverse .arrows .arrow {
  width: @smallSegmentWildWidth;
  height: @smallSegmentWildWidth;
  background-color: white;
  position: relative;
}

.card .small-content .reverse .arrows .arrow:before,
.card .small-content-reverse .reverse .arrows .arrow:before {
  content: "";
  display: block;
  width: @smallSegmentWildWidth;
  height: @smallSegmentWildWidth;
  background-color: inherit;
  border-top-left-radius: 100%;
  position: absolute;
  left: @smallContentReverseLeft;
}

.card .small-content .reverse .arrows .arrow:after,
.card .small-content-reverse .reverse .arrows .arrow:after {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: @smallSegmentWildWidth solid white;
  border-top-color: transparent;
  border-bottom-color: transparent;
  border-right: none;
  position: absolute;
  right: @smallContentReverseLeft;
  top: @smallContentAfter;
}

.card .small-content .reverse .arrows .arrow:last-child,
.card .small-content-reverse .reverse .arrows .arrow:last-child {
  transform: rotate(180deg);
  top: @smallContentReverseTop;
  right: @smallContentReverseRight;
}

.card .small-content .wild,
.card .small-content-reverse .wild {
  margin: -6.66666667px 0 0 @smallContentAfter;
  background-color: white;
  width: @(smallContentSkip + "px");
  border-radius: 50%;
  transform: skewX(-25deg);
  overflow: hidden;
  font-size: 0;
  border: 2px solid white;
}

.card .small-content .wild .segment,
.card .small-content-reverse .wild .segment {
  display: inline-block;
  width: @smallSegmentWildWidth;
  height: @smallSegmentWildHeight;
}

.card .small-content .wild .segment.red,
.card .small-content-reverse .wild .segment.red {
  background-color: @red;
}
.card .small-content .wild .segment.green,
.card .small-content-reverse .wild .segment.green {
  background-color: @green;
}
.card .small-content .wild .segment.yellow,
.card .small-content-reverse .wild .segment.yellow {
  background-color: @yellow;
}
.card .small-content .wild .segment.blue,
.card .small-content-reverse .wild .segment.blue {
  background-color: @blue;
}

.card .small-content .wild,
.card .small-content-reverse .wild {
  margin: 0;
  border: 1px solid white;
}



.custom {
  top: -@smallContentTop!important;

}

.reverse-custom  {
  bottom: -@smallContentTop!important;

}

.card .small-content {
  top: @smallContentTop;
  left: @smallContentLeft;
}

.card .small-content-reverse {
  right: @smallContentLeft;
  bottom: @smallContentTop;
  transform: rotate(180deg);
}

.plus-four {
  /* background-color: transparent; */
  width: @(ellipseWidth + "px");
  height: @(ellipseHeight + "px");
  position: relative;
  margin: @plusFourMargin 0 0 @plusFourMargin2;
}

.plus-four div[class^="card"] {
  width: @(plusTwoWidth + "px");
  height: @(plusTwoHeight + "px");
  border-radius: 10%;
  border: @plusTwoBorder solid white;
  position: absolute;
}

.plus-four .card1 {
  background-color: @green;
  left: 5%;
  top: 50%;
}

.plus-four .card2 {
  background-color: @blue;
  top: 25%;
  left: 25%;
}

.plus-four .card3 {
  background-color: @red;
  top: 35%;
  left: 45%;
}

.plus-four .card4 {
  background-color: @yellow;
  top: 10%;
  left: 65%;
}


.card .small-content-cardBack {
  top: @smallContentTop;
    left: @smallContentLeft;
}

.card .small-content-cardBack, .card .small-content-reverse-cardBack {
    position: absolute;
    font-size: @smallContentFont;
    color: @yellow;
    font-weight: bold;
    

}

</style>

<div ng-app="App" class="ng-scope">

  

    
    @if(card.CardValue == ECardValue.CardBack){
    
        <card type="cardBack" content="cardBack" color="black" class="ng-isolate-scope">
              <div class="card black" ng-class="color">
                <div class="ellipse-cardBack"></div>
                <div class="small-content-cardBack small-content ng-binding yellow" ng-class="color" ng-bind-html="smallContent">UNO</div>
                <div class="small-content-reverse-cardBack small-content-reverse ng-binding yellow" ng-class="color" ng-bind-html="smallContent">UNO</div>
              </div>
            </card>
    }
    
    else if (card.CardValue == ECardValue.ChooseColor)
    {
      
        <div class="card @(cardModel.GetCardColor(card.CardSuit)) choose-color-card" style="width: @(Model.Width + "px"); height: calc(@(Model.Width + "px") * 1.6)" ng-class="color">
        </div>
      
    }
    
    else if (!(card.CardValue is ECardValue.Reverse or ECardValue.Skip or ECardValue.Undefined or ECardValue.Wild or ECardValue.DrawTwo or ECardValue.WildDrawFour))
    {
      <card content=@(cardModel.GetCardValueInt(card.CardValue)) color=@(cardModel.GetCardColor(card.CardSuit)) class="ng-isolate-scope">
        <div class="card @(cardModel.GetCardColor(card.CardSuit))" ng-class="color">
          <div class="ellipse"></div>
          <div class="content ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="content">@(cardModel.GetCardValueInt(card.CardValue))</div>
          <div class="small-content ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">@(cardModel.GetCardValueInt(card.CardValue))</div>
          <div class="small-content-reverse ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">@(cardModel.GetCardValueInt(card.CardValue))</div>
        </div>
      </card>
      
    }


    else if (card.CardValue is ECardValue.Skip)
    {
        <card type="skip" color=@(cardModel.GetCardColor(card.CardSuit)) class="ng-isolate-scope">
            <div class="card @(cardModel.GetCardColor(card.CardSuit))" ng-class="color">
                <div class="ellipse"></div>
                <div class="content ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="content">
                    <div class="skip"></div>
                </div>
                <div class="small-content ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">
                    <div class="skip"></div>
                </div>
                <div class="small-content-reverse ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">
                    <div class="skip"></div>
                </div>
            </div>
        </card>
    }


    else if (card.CardValue is ECardValue.DrawTwo)
    {
        <card type="plus-two" color=@(cardModel.GetCardColor(card.CardSuit)) class="ng-isolate-scope">
            <div class="card @(cardModel.GetCardColor(card.CardSuit))" ng-class="color">
                <div class="ellipse"></div>
                <div class="content ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="content">
                    <div class="plus-two"></div>
                </div>
                <div class="small-content ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">+2</div>
                <div class="small-content-reverse ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">+2</div>
            </div>
        </card>
    }

    else if (card.CardValue is ECardValue.Reverse)
    {
        <card type="reverse" color=@(cardModel.GetCardColor(card.CardSuit)) class="ng-isolate-scope">
            <div class="card @(cardModel.GetCardColor(card.CardSuit))" ng-class="color">
                <div class="ellipse"></div>
                <div class="content ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="content">
                    <div class="reverse">
                        <div class="arrows">
                            <div class="arrow"></div>
                            <div class="arrow"></div>
                        </div>
                    </div>
                </div>
                <div class="small-content custom ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">
                    <div class="reverse">
                        <div class="arrows">
                            <div class="arrow"></div>
                            <div class="arrow"></div>
                        </div>
                    </div>
                </div>
                <div class="small-content-reverse reverse-custom ng-binding @(cardModel.GetCardColor(card.CardSuit))" ng-class="color" ng-bind-html="smallContent">
                    <div class="reverse">
                        <div class="arrows">
                            <div class="arrow"></div>
                            <div class="arrow"></div>
                        </div>
                    </div>
                </div>
            </div>
        </card>
    }

    else if (card.CardValue is ECardValue.Wild)
    {
        <card type="wild" class="ng-isolate-scope">
            <div class="card @(card.CardSuit == ECardSuit.Wild? "black" : cardModel.GetCardColor(card.CardSuit))" ng-class="color">
                <div class="ellipse"></div>
                <div class="content ng-binding black" ng-class="color" ng-bind-html="content">
                    <div class="wild">
                        <div class="segment yellow"></div>
                        <div class="segment green"></div>
                        <div class="segment blue"></div>
                        <div class="segment red"></div>
                    </div>
                </div>
                <div class="small-content ng-binding black" ng-class="color" ng-bind-html="smallContent">
                    <div class="wild">
                        <div class="segment yellow"></div>
                        <div class="segment green"></div>
                        <div class="segment blue"></div>
                        <div class="segment red"></div>
                    </div>
                </div>
                <div class="small-content-reverse ng-binding black" ng-class="color" ng-bind-html="smallContent">
                    <div class="wild">
                        <div class="segment yellow"></div>
                        <div class="segment green"></div>
                        <div class="segment blue"></div>
                        <div class="segment red"></div>
                    </div>
                </div>
            </div>
        </card>
    }

    else if (card.CardValue is ECardValue.WildDrawFour)
    {
        <card type="plus-four" class="ng-isolate-scope">
            <div class="card @(card.CardSuit == ECardSuit.Wild? "black" : cardModel.GetCardColor(card.CardSuit))" ng-class="color">
                <div class="ellipse"></div>
                <div class="content ng-binding black" ng-class="color" ng-bind-html="content">
                    <div class="plus-four">
                        <div class="card1"></div>
                        <div class="card2"></div>
                        <div class="card3"></div>
                        <div class="card4"></div>
                    </div>
                </div>
                <div class="small-content ng-binding black" ng-class="color" ng-bind-html="smallContent">+4</div>
                <div class="small-content-reverse ng-binding black" ng-class="color" ng-bind-html="smallContent">+4</div>
            </div>
        </card>
    }
</div>